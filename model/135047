format 70
"util" // src::java::util
  revision 5
  modified_by 7 "algassimou"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/util"
  java_package "java.util"
  classview 134791 "util"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 135815 "List"
      visibility public stereotype "interface"
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 135943 // Collection
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An ordered collection (also known as a <i>sequence</i>).  The user of this
interface has precise control over where in the list each element is
inserted.  The user can access elements by their integer index (position in
the list), and search for elements in the list.<p>

Unlike sets, lists typically allow duplicate elements.  More formally,
lists typically allow pairs of elements <tt>e1</tt> and <tt>e2</tt>
such that <tt>e1.equals(e2)</tt>, and they typically allow multiple
null elements if they allow null elements at all.  It is not inconceivable
that someone might wish to implement a list that prohibits duplicates, by
throwing runtime exceptions when the user attempts to insert them, but we
expect this usage to be rare.<p>

The <tt>List</tt> interface places additional stipulations, beyond those
specified in the <tt>Collection</tt> interface, on the contracts of the
<tt>iterator</tt>, <tt>add</tt>, <tt>remove</tt>, <tt>equals</tt>, and
<tt>hashCode</tt> methods.  Declarations for other inherited methods are
also included here for convenience.<p>

The <tt>List</tt> interface provides four methods for positional (indexed)
access to list elements.  Lists (like Java arrays) are zero based.  Note
that these operations may execute in time proportional to the index value
for some implementations (the <tt>LinkedList</tt> class, for
example). Thus, iterating over the elements in a list is typically
preferable to indexing through it if the caller does not know the
implementation.<p>

The <tt>List</tt> interface provides a special iterator, called a
<tt>ListIterator</tt>, that allows element insertion and replacement, and
bidirectional access in addition to the normal operations that the
<tt>Iterator</tt> interface provides.  A method is provided to obtain a
list iterator that starts at a specified position in the list.<p>

The <tt>List</tt> interface provides two methods to search for a specified
object.  From a performance standpoint, these methods should be used with
caution.  In many implementations they will perform costly linear
searches.<p>

The <tt>List</tt> interface provides two methods to efficiently insert and
remove multiple elements at an arbitrary point in the list.<p>

Note: While it is permissible for lists to contain themselves as elements,
extreme caution is advised: the <tt>equals</tt> and <tt>hashCode</tt>
methods are no longer well defined on such a list.

<p>Some list implementations have restrictions on the elements that
they may contain.  For example, some implementations prohibit null elements,
and some have restrictions on the types of their elements.  Attempting to
add an ineligible element throws an unchecked exception, typically
<tt>NullPointerException</tt> or <tt>ClassCastException</tt>.  Attempting
to query the presence of an ineligible element may throw an exception,
or it may simply return false; some implementations will exhibit the former
behavior and some will exhibit the latter.  More generally, attempting an
operation on an ineligible element whose completion would not result in
the insertion of an ineligible element into the list may throw an
exception or it may succeed, at the option of the implementation.
Such exceptions are marked as \"optional\" in the specification for this
interface.

<p>This interface is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@author  Neal Gafter
@see Collection
@see Set
@see ArrayList
@see LinkedList
@see Vector
@see Arrays#asList(Object[])
@see Collections#nCopies(int, Object)
@see Collections#EMPTY_LIST
@see AbstractList
@see AbstractSequentialList
@since 1.2"
      classrelation 136327 // <realization>
	relation 136327 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 136327 // <realization>
	  b parent class_ref 135943 // Collection
      end

      operation 136711 "size"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query Operations

Returns the number of elements in this list.  If this list contains
more than <tt>Integer.MAX_VALUE</tt> elements, returns
<tt>Integer.MAX_VALUE</tt>.

@return the number of elements in this list"
      end

      operation 136839 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this list contains no elements.

@return <tt>true</tt> if this list contains no elements"
      end

      operation 136967 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 136327 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this list contains the specified element.
More formally, returns <tt>true</tt> if and only if this list contains
at least one element <tt>e</tt> such that
<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.

@param o element whose presence in this list is to be tested
@return <tt>true</tt> if this list contains the specified element
@throws ClassCastException if the type of the specified element
        is incompatible with this list (optional)
@throws NullPointerException if the specified element is null and this
        list does not permit null elements (optional)"
      end

      operation 137095 "iterator"
	public return_type class_ref 136199 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this list in proper sequence.

@return an iterator over the elements in this list in proper sequence"
      end

      operation 137223 "toArray"
	public return_type class_ref 136327 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this list in proper
sequence (from first to last element).

<p>The returned array will be \"safe\" in that no references to it are
maintained by this list.  (In other words, this method must
allocate a new array even if this list is backed by an array).
The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this list in proper
        sequence
@see Arrays#asList(Object[])"
      end

      operation 137351 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this list in
proper sequence (from first to last element); the runtime type of
the returned array is that of the specified array.  If the list fits
in the specified array, it is returned therein.  Otherwise, a new
array is allocated with the runtime type of the specified array and
the size of this list.

<p>If the list fits in the specified array with room to spare (i.e.,
the array has more elements than the list), the element in the array
immediately following the end of the list is set to <tt>null</tt>.
(This is useful in determining the length of the list <i>only</i> if
the caller knows that the list does not contain any null elements.)

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose <tt>x</tt> is a list known to contain only strings.
The following code can be used to dump the list into a newly
allocated array of <tt>String</tt>:

<pre>
    String[] y = x.toArray(new String[0]);</pre>

Note that <tt>toArray(new Object[0])</tt> is identical in function to
<tt>toArray()</tt>.

@param a the array into which the elements of this list are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose.
@return an array containing the elements of this list
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this list
@throws NullPointerException if the specified array is null"
      end

      operation 137479 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modification Operations

Appends the specified element to the end of this list (optional
operation).

<p>Lists that support this operation may place limitations on what
elements may be added to this list.  In particular, some
lists will refuse to add null elements, and others will impose
restrictions on the type of elements that may be added.  List
classes should clearly specify in their documentation any restrictions
on what elements may be added.

@param e element to be appended to this list
@return <tt>true</tt> (as specified by {@link Collection#add})
@throws UnsupportedOperationException if the <tt>add</tt> operation
        is not supported by this list
@throws ClassCastException if the class of the specified element
        prevents it from being added to this list
@throws NullPointerException if the specified element is null and this
        list does not permit null elements
@throws IllegalArgumentException if some property of this element
        prevents it from being added to this list"
      end

      operation 137607 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 136327 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first occurrence of the specified element from this list,
if it is present (optional operation).  If this list does not contain
the element, it is unchanged.  More formally, removes the element with
the lowest index <tt>i</tt> such that
<tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>
(if such an element exists).  Returns <tt>true</tt> if this list
contained the specified element (or equivalently, if this list changed
as a result of the call).

@param o element to be removed from this list, if present
@return <tt>true</tt> if this list contained the specified element
@throws ClassCastException if the type of the specified element
        is incompatible with this list (optional)
@throws NullPointerException if the specified element is null and this
        list does not permit null elements (optional)
@throws UnsupportedOperationException if the <tt>remove</tt> operation
        is not supported by this list"
      end

      operation 137735 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135943 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Modification Operations

Returns <tt>true</tt> if this list contains all of the elements of the
specified collection.

@param  c collection to be checked for containment in this list
@return <tt>true</tt> if this list contains all of the elements of the
        specified collection
@throws ClassCastException if the types of one or more elements
        in the specified collection are incompatible with this
        list (optional)
@throws NullPointerException if the specified collection contains one
        or more null elements and this list does not permit null
        elements (optional), or if the specified collection is null
@see #contains(Object)"
      end

      operation 137863 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135943 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all of the elements in the specified collection to the end of
this list, in the order that they are returned by the specified
collection's iterator (optional operation).  The behavior of this
operation is undefined if the specified collection is modified while
the operation is in progress.  (Note that this will occur if the
specified collection is this list, and it's nonempty.)

@param c collection containing elements to be added to this list
@return <tt>true</tt> if this list changed as a result of the call
@throws UnsupportedOperationException if the <tt>addAll</tt> operation
        is not supported by this list
@throws ClassCastException if the class of an element of the specified
        collection prevents it from being added to this list
@throws NullPointerException if the specified collection contains one
        or more null elements and this list does not permit null
        elements, or if the specified collection is null
@throws IllegalArgumentException if some property of an element of the
        specified collection prevents it from being added to this list
@see #add(Object)"
      end

      operation 137991 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "c" type class_ref 135943 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts all of the elements in the specified collection into this
list at the specified position (optional operation).  Shifts the
element currently at that position (if any) and any subsequent
elements to the right (increases their indices).  The new elements
will appear in this list in the order that they are returned by the
specified collection's iterator.  The behavior of this operation is
undefined if the specified collection is modified while the
operation is in progress.  (Note that this will occur if the specified
collection is this list, and it's nonempty.)

@param index index at which to insert the first element from the
             specified collection
@param c collection containing elements to be added to this list
@return <tt>true</tt> if this list changed as a result of the call
@throws UnsupportedOperationException if the <tt>addAll</tt> operation
        is not supported by this list
@throws ClassCastException if the class of an element of the specified
        collection prevents it from being added to this list
@throws NullPointerException if the specified collection contains one
        or more null elements and this list does not permit null
        elements, or if the specified collection is null
@throws IllegalArgumentException if some property of an element of the
        specified collection prevents it from being added to this list
@throws IndexOutOfBoundsException if the index is out of range
        (<tt>index &lt; 0 || index &gt; size()</tt>)"
      end

      operation 138119 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135943 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this list all of its elements that are contained in the
specified collection (optional operation).

@param c collection containing elements to be removed from this list
@return <tt>true</tt> if this list changed as a result of the call
@throws UnsupportedOperationException if the <tt>removeAll</tt> operation
        is not supported by this list
@throws ClassCastException if the class of an element of this list
        is incompatible with the specified collection (optional)
@throws NullPointerException if this list contains a null element and the
        specified collection does not permit null elements (optional),
        or if the specified collection is null
@see #remove(Object)
@see #contains(Object)"
      end

      operation 138247 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135943 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retains only the elements in this list that are contained in the
specified collection (optional operation).  In other words, removes
from this list all of its elements that are not contained in the
specified collection.

@param c collection containing elements to be retained in this list
@return <tt>true</tt> if this list changed as a result of the call
@throws UnsupportedOperationException if the <tt>retainAll</tt> operation
        is not supported by this list
@throws ClassCastException if the class of an element of this list
        is incompatible with the specified collection (optional)
@throws NullPointerException if this list contains a null element and the
        specified collection does not permit null elements (optional),
        or if the specified collection is null
@see #remove(Object)
@see #contains(Object)"
      end

      operation 138375 "clear"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this list (optional operation).
The list will be empty after this call returns.

@throws UnsupportedOperationException if the <tt>clear</tt> operation
        is not supported by this list"
      end

      operation 138503 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 136327 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison and hashing

Compares the specified object with this list for equality.  Returns
<tt>true</tt> if and only if the specified object is also a list, both
lists have the same size, and all corresponding pairs of elements in
the two lists are <i>equal</i>.  (Two elements <tt>e1</tt> and
<tt>e2</tt> are <i>equal</i> if <tt>(e1==null ? e2==null :
e1.equals(e2))</tt>.)  In other words, two lists are defined to be
equal if they contain the same elements in the same order.  This
definition ensures that the equals method works properly across
different implementations of the <tt>List</tt> interface.

@param o the object to be compared for equality with this list
@return <tt>true</tt> if the specified object is equal to this list"
      end

      operation 138631 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this list.  The hash code of a list
is defined to be the result of the following calculation:
<pre>
 int hashCode = 1;
 for (E e : list)
     hashCode = 31*hashCode + (e==null ? 0 : e.hashCode());
</pre>
This ensures that <tt>list1.equals(list2)</tt> implies that
<tt>list1.hashCode()==list2.hashCode()</tt> for any two lists,
<tt>list1</tt> and <tt>list2</tt>, as required by the general
contract of {@link Object#hashCode}.

@return the hash code value for this list
@see Object#equals(Object)
@see #equals(Object)"
      end

      operation 138759 "get"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Positional Access Operations

Returns the element at the specified position in this list.

@param index index of the element to return
@return the element at the specified position in this list
@throws IndexOutOfBoundsException if the index is out of range
        (<tt>index &lt; 0 || index &gt;= size()</tt>)"
      end

      operation 138887 "set"
	public explicit_return_type "E"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the element at the specified position in this list with the
specified element (optional operation).

@param index index of the element to replace
@param element element to be stored at the specified position
@return the element previously at the specified position
@throws UnsupportedOperationException if the <tt>set</tt> operation
        is not supported by this list
@throws ClassCastException if the class of the specified element
        prevents it from being added to this list
@throws NullPointerException if the specified element is null and
        this list does not permit null elements
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this list
@throws IndexOutOfBoundsException if the index is out of range
        (<tt>index &lt; 0 || index &gt;= size()</tt>)"
      end

      operation 139015 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the specified position in this list
(optional operation).  Shifts the element currently at that position
(if any) and any subsequent elements to the right (adds one to their
indices).

@param index index at which the specified element is to be inserted
@param element element to be inserted
@throws UnsupportedOperationException if the <tt>add</tt> operation
        is not supported by this list
@throws ClassCastException if the class of the specified element
        prevents it from being added to this list
@throws NullPointerException if the specified element is null and
        this list does not permit null elements
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this list
@throws IndexOutOfBoundsException if the index is out of range
        (<tt>index &lt; 0 || index &gt; size()</tt>)"
      end

      operation 139143 "remove"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the element at the specified position in this list (optional
operation).  Shifts any subsequent elements to the left (subtracts one
from their indices).  Returns the element that was removed from the
list.

@param index the index of the element to be removed
@return the element previously at the specified position
@throws UnsupportedOperationException if the <tt>remove</tt> operation
        is not supported by this list
@throws IndexOutOfBoundsException if the index is out of range
        (<tt>index &lt; 0 || index &gt;= size()</tt>)"
      end

      operation 139271 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" type class_ref 136327 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Search Operations

Returns the index of the first occurrence of the specified element
in this list, or -1 if this list does not contain the element.
More formally, returns the lowest index <tt>i</tt> such that
<tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
or -1 if there is no such index.

@param o element to search for
@return the index of the first occurrence of the specified element in
        this list, or -1 if this list does not contain the element
@throws ClassCastException if the type of the specified element
        is incompatible with this list (optional)
@throws NullPointerException if the specified element is null and this
        list does not permit null elements (optional)"
      end

      operation 139399 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" type class_ref 136327 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the last occurrence of the specified element
in this list, or -1 if this list does not contain the element.
More formally, returns the highest index <tt>i</tt> such that
<tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
or -1 if there is no such index.

@param o element to search for
@return the index of the last occurrence of the specified element in
        this list, or -1 if this list does not contain the element
@throws ClassCastException if the type of the specified element
        is incompatible with this list (optional)
@throws NullPointerException if the specified element is null and this
        list does not permit null elements (optional)"
      end

      operation 139527 "listIterator"
	public return_type class_ref 136455 // ListIterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " List Iterators

Returns a list iterator over the elements in this list (in proper
sequence).

@return a list iterator over the elements in this list (in proper
        sequence)"
      end

      operation 139655 "listIterator"
	public return_type class_ref 136455 // ListIterator
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list iterator over the elements in this list (in proper
sequence), starting at the specified position in the list.
The specified index indicates the first element that would be
returned by an initial call to {@link ListIterator#next next}.
An initial call to {@link ListIterator#previous previous} would
return the element with the specified index minus one.

@param index index of the first element to be returned from the
       list iterator (by a call to {@link ListIterator#next next})
@return a list iterator over the elements in this list (in proper
        sequence), starting at the specified position in the list
@throws IndexOutOfBoundsException if the index is out of range
        ({@code index < 0 || index > size()})"
      end

      operation 139783 "subList"
	public return_type class_ref 135815 // List
	nparams 2
	  param in name "fromIndex" explicit_type "int"
	  param in name "toIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " View

Returns a view of the portion of this list between the specified
<tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive.  (If
<tt>fromIndex</tt> and <tt>toIndex</tt> are equal, the returned list is
empty.)  The returned list is backed by this list, so non-structural
changes in the returned list are reflected in this list, and vice-versa.
The returned list supports all of the optional list operations supported
by this list.<p>

This method eliminates the need for explicit range operations (of
the sort that commonly exist for arrays).  Any operation that expects
a list can be used as a range operation by passing a subList view
instead of a whole list.  For example, the following idiom
removes a range of elements from a list:
<pre>
     list.subList(from, to).clear();
</pre>
Similar idioms may be constructed for <tt>indexOf</tt> and
<tt>lastIndexOf</tt>, and all of the algorithms in the
<tt>Collections</tt> class can be applied to a subList.<p>

The semantics of the list returned by this method become undefined if
the backing list (i.e., this list) is <i>structurally modified</i> in
any way other than via the returned list.  (Structural modifications are
those that change the size of this list, or otherwise perturb it in such
a fashion that iterations in progress may yield incorrect results.)

@param fromIndex low endpoint (inclusive) of the subList
@param toIndex high endpoint (exclusive) of the subList
@return a view of the specified range within this list
@throws IndexOutOfBoundsException for an illegal endpoint index value
        (<tt>fromIndex &lt; 0 || toIndex &gt; size ||
        fromIndex &gt; toIndex</tt>)"
      end
    end

    class 135943 "Collection"
      visibility public stereotype "interface"
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 136071 // Iterable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The root interface in the <i>collection hierarchy</i>.  A collection
represents a group of objects, known as its <i>elements</i>.  Some
collections allow duplicate elements and others do not.  Some are ordered
and others unordered.  The JDK does not provide any <i>direct</i>
implementations of this interface: it provides implementations of more
specific subinterfaces like <tt>Set</tt> and <tt>List</tt>.  This interface
is typically used to pass collections around and manipulate them where
maximum generality is desired.

<p><i>Bags</i> or <i>multisets</i> (unordered collections that may contain
duplicate elements) should implement this interface directly.

<p>All general-purpose <tt>Collection</tt> implementation classes (which
typically implement <tt>Collection</tt> indirectly through one of its
subinterfaces) should provide two \"standard\" constructors: a void (no
arguments) constructor, which creates an empty collection, and a
constructor with a single argument of type <tt>Collection</tt>, which
creates a new collection with the same elements as its argument.  In
effect, the latter constructor allows the user to copy any collection,
producing an equivalent collection of the desired implementation type.
There is no way to enforce this convention (as interfaces cannot contain
constructors) but all of the general-purpose <tt>Collection</tt>
implementations in the Java platform libraries comply.

<p>The \"destructive\" methods contained in this interface, that is, the
methods that modify the collection on which they operate, are specified to
throw <tt>UnsupportedOperationException</tt> if this collection does not
support the operation.  If this is the case, these methods may, but are not
required to, throw an <tt>UnsupportedOperationException</tt> if the
invocation would have no effect on the collection.  For example, invoking
the {@link #addAll(Collection)} method on an unmodifiable collection may,
but is not required to, throw the exception if the collection to be added
is empty.

<p>Some collection implementations have restrictions on the elements that
they may contain.  For example, some implementations prohibit null elements,
and some have restrictions on the types of their elements.  Attempting to
add an ineligible element throws an unchecked exception, typically
<tt>NullPointerException</tt> or <tt>ClassCastException</tt>.  Attempting
to query the presence of an ineligible element may throw an exception,
or it may simply return false; some implementations will exhibit the former
behavior and some will exhibit the latter.  More generally, attempting an
operation on an ineligible element whose completion would not result in
the insertion of an ineligible element into the collection may throw an
exception or it may succeed, at the option of the implementation.
Such exceptions are marked as \"optional\" in the specification for this
interface.

<p>It is up to each collection to determine its own synchronization
policy.  In the absence of a stronger guarantee by the
implementation, undefined behavior may result from the invocation
of any method on a collection that is being mutated by another
thread; this includes direct invocations, passing the collection to
a method that might perform invocations, and using an existing
iterator to examine the collection.

<p>Many methods in Collections Framework interfaces are defined in
terms of the {@link Object#equals(Object) equals} method.  For example,
the specification for the {@link #contains(Object) contains(Object o)}
method says: \"returns <tt>true</tt> if and only if this collection
contains at least one element <tt>e</tt> such that
<tt>(o==null ? e==null : o.equals(e))</tt>.\"  This specification should
<i>not</i> be construed to imply that invoking <tt>Collection.contains</tt>
with a non-null argument <tt>o</tt> will cause <tt>o.equals(e)</tt> to be
invoked for any element <tt>e</tt>.  Implementations are free to implement
optimizations whereby the <tt>equals</tt> invocation is avoided, for
example, by first comparing the hash codes of the two elements.  (The
{@link Object#hashCode()} specification guarantees that two objects with
unequal hash codes cannot be equal.)  More generally, implementations of
the various Collections Framework interfaces are free to take advantage of
the specified behavior of underlying {@link Object} methods wherever the
implementor deems it appropriate.

<p>This interface is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@author  Neal Gafter
@see     Set
@see     List
@see     Map
@see     SortedSet
@see     SortedMap
@see     HashSet
@see     TreeSet
@see     ArrayList
@see     LinkedList
@see     Vector
@see     Collections
@see     Arrays
@see     AbstractCollection
@since 1.2"
      classrelation 136199 // <realization>
	relation 136199 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 136199 // <realization>
	  b parent class_ref 136071 // Iterable
      end

      operation 134791 "size"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query Operations

Returns the number of elements in this collection.  If this collection
contains more than <tt>Integer.MAX_VALUE</tt> elements, returns
<tt>Integer.MAX_VALUE</tt>.

@return the number of elements in this collection"
      end

      operation 134919 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this collection contains no elements.

@return <tt>true</tt> if this collection contains no elements"
      end

      operation 135047 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 136327 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this collection contains the specified element.
More formally, returns <tt>true</tt> if and only if this collection
contains at least one element <tt>e</tt> such that
<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.

@param o element whose presence in this collection is to be tested
@return <tt>true</tt> if this collection contains the specified
        element
@throws ClassCastException if the type of the specified element
        is incompatible with this collection (optional)
@throws NullPointerException if the specified element is null and this
        collection does not permit null elements (optional)"
      end

      operation 135175 "iterator"
	public return_type class_ref 136199 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this collection.  There are no
guarantees concerning the order in which the elements are returned
(unless this collection is an instance of some class that provides a
guarantee).

@return an <tt>Iterator</tt> over the elements in this collection"
      end

      operation 135303 "toArray"
	public return_type class_ref 136327 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this collection.
If this collection makes any guarantees as to what order its elements
are returned by its iterator, this method must return the elements in
the same order.

<p>The returned array will be \"safe\" in that no references to it are
maintained by this collection.  (In other words, this method must
allocate a new array even if this collection is backed by an array).
The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this collection"
      end

      operation 135431 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this collection;
the runtime type of the returned array is that of the specified array.
If the collection fits in the specified array, it is returned therein.
Otherwise, a new array is allocated with the runtime type of the
specified array and the size of this collection.

<p>If this collection fits in the specified array with room to spare
(i.e., the array has more elements than this collection), the element
in the array immediately following the end of the collection is set to
<tt>null</tt>.  (This is useful in determining the length of this
collection <i>only</i> if the caller knows that this collection does
not contain any <tt>null</tt> elements.)

<p>If this collection makes any guarantees as to what order its elements
are returned by its iterator, this method must return the elements in
the same order.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose <tt>x</tt> is a collection known to contain only strings.
The following code can be used to dump the collection into a newly
allocated array of <tt>String</tt>:

<pre>
    String[] y = x.toArray(new String[0]);</pre>

Note that <tt>toArray(new Object[0])</tt> is identical in function to
<tt>toArray()</tt>.

@param a the array into which the elements of this collection are to be
       stored, if it is big enough; otherwise, a new array of the same
       runtime type is allocated for this purpose.
@return an array containing all of the elements in this collection
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this collection
@throws NullPointerException if the specified array is null"
      end

      operation 135559 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modification Operations

Ensures that this collection contains the specified element (optional
operation).  Returns <tt>true</tt> if this collection changed as a
result of the call.  (Returns <tt>false</tt> if this collection does
not permit duplicates and already contains the specified element.)<p>

Collections that support this operation may place limitations on what
elements may be added to this collection.  In particular, some
collections will refuse to add <tt>null</tt> elements, and others will
impose restrictions on the type of elements that may be added.
Collection classes should clearly specify in their documentation any
restrictions on what elements may be added.<p>

If a collection refuses to add a particular element for any reason
other than that it already contains the element, it <i>must</i> throw
an exception (rather than returning <tt>false</tt>).  This preserves
the invariant that a collection always contains the specified element
after this call returns.

@param e element whose presence in this collection is to be ensured
@return <tt>true</tt> if this collection changed as a result of the
        call
@throws UnsupportedOperationException if the <tt>add</tt> operation
        is not supported by this collection
@throws ClassCastException if the class of the specified element
        prevents it from being added to this collection
@throws NullPointerException if the specified element is null and this
        collection does not permit null elements
@throws IllegalArgumentException if some property of the element
        prevents it from being added to this collection
@throws IllegalStateException if the element cannot be added at this
        time due to insertion restrictions"
      end

      operation 135687 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 136327 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this
collection, if it is present (optional operation).  More formally,
removes an element <tt>e</tt> such that
<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>, if
this collection contains one or more such elements.  Returns
<tt>true</tt> if this collection contained the specified element (or
equivalently, if this collection changed as a result of the call).

@param o element to be removed from this collection, if present
@return <tt>true</tt> if an element was removed as a result of this call
@throws ClassCastException if the type of the specified element
        is incompatible with this collection (optional)
@throws NullPointerException if the specified element is null and this
        collection does not permit null elements (optional)
@throws UnsupportedOperationException if the <tt>remove</tt> operation
        is not supported by this collection"
      end

      operation 135815 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135943 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Operations

Returns <tt>true</tt> if this collection contains all of the elements
in the specified collection.

@param  c collection to be checked for containment in this collection
@return <tt>true</tt> if this collection contains all of the elements
        in the specified collection
@throws ClassCastException if the types of one or more elements
        in the specified collection are incompatible with this
        collection (optional)
@throws NullPointerException if the specified collection contains one
        or more null elements and this collection does not permit null
        elements (optional), or if the specified collection is null
@see    #contains(Object)"
      end

      operation 135943 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135943 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds all of the elements in the specified collection to this collection
(optional operation).  The behavior of this operation is undefined if
the specified collection is modified while the operation is in progress.
(This implies that the behavior of this call is undefined if the
specified collection is this collection, and this collection is
nonempty.)

@param c collection containing elements to be added to this collection
@return <tt>true</tt> if this collection changed as a result of the call
@throws UnsupportedOperationException if the <tt>addAll</tt> operation
        is not supported by this collection
@throws ClassCastException if the class of an element of the specified
        collection prevents it from being added to this collection
@throws NullPointerException if the specified collection contains a
        null element and this collection does not permit null elements,
        or if the specified collection is null
@throws IllegalArgumentException if some property of an element of the
        specified collection prevents it from being added to this
        collection
@throws IllegalStateException if not all the elements can be added at
        this time due to insertion restrictions
@see #add(Object)"
      end

      operation 136071 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135943 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of this collection's elements that are also contained in the
specified collection (optional operation).  After this call returns,
this collection will contain no elements in common with the specified
collection.

@param c collection containing elements to be removed from this collection
@return <tt>true</tt> if this collection changed as a result of the
        call
@throws UnsupportedOperationException if the <tt>removeAll</tt> method
        is not supported by this collection
@throws ClassCastException if the types of one or more elements
        in this collection are incompatible with the specified
        collection (optional)
@throws NullPointerException if this collection contains one or more
        null elements and the specified collection does not support
        null elements (optional), or if the specified collection is null
@see #remove(Object)
@see #contains(Object)"
      end

      operation 136199 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 135943 // Collection
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retains only the elements in this collection that are contained in the
specified collection (optional operation).  In other words, removes from
this collection all of its elements that are not contained in the
specified collection.

@param c collection containing elements to be retained in this collection
@return <tt>true</tt> if this collection changed as a result of the call
@throws UnsupportedOperationException if the <tt>retainAll</tt> operation
        is not supported by this collection
@throws ClassCastException if the types of one or more elements
        in this collection are incompatible with the specified
        collection (optional)
@throws NullPointerException if this collection contains one or more
        null elements and the specified collection does not permit null
        elements (optional), or if the specified collection is null
@see #remove(Object)
@see #contains(Object)"
      end

      operation 136327 "clear"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this collection (optional operation).
The collection will be empty after this method returns.

@throws UnsupportedOperationException if the <tt>clear</tt> operation
        is not supported by this collection"
      end

      operation 136455 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 136327 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison and hashing

Compares the specified object with this collection for equality. <p>

While the <tt>Collection</tt> interface adds no stipulations to the
general contract for the <tt>Object.equals</tt>, programmers who
implement the <tt>Collection</tt> interface \"directly\" (in other words,
create a class that is a <tt>Collection</tt> but is not a <tt>Set</tt>
or a <tt>List</tt>) must exercise care if they choose to override the
<tt>Object.equals</tt>.  It is not necessary to do so, and the simplest
course of action is to rely on <tt>Object</tt>'s implementation, but
the implementor may wish to implement a \"value comparison\" in place of
the default \"reference comparison.\"  (The <tt>List</tt> and
<tt>Set</tt> interfaces mandate such value comparisons.)<p>

The general contract for the <tt>Object.equals</tt> method states that
equals must be symmetric (in other words, <tt>a.equals(b)</tt> if and
only if <tt>b.equals(a)</tt>).  The contracts for <tt>List.equals</tt>
and <tt>Set.equals</tt> state that lists are only equal to other lists,
and sets to other sets.  Thus, a custom <tt>equals</tt> method for a
collection class that implements neither the <tt>List</tt> nor
<tt>Set</tt> interface must return <tt>false</tt> when this collection
is compared to any list or set.  (By the same logic, it is not possible
to write a class that correctly implements both the <tt>Set</tt> and
<tt>List</tt> interfaces.)

@param o object to be compared for equality with this collection
@return <tt>true</tt> if the specified object is equal to this
collection

@see Object#equals(Object)
@see Set#equals(Object)
@see List#equals(Object)"
      end

      operation 136583 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this collection.  While the
<tt>Collection</tt> interface adds no stipulations to the general
contract for the <tt>Object.hashCode</tt> method, programmers should
take note that any class that overrides the <tt>Object.equals</tt>
method must also override the <tt>Object.hashCode</tt> method in order
to satisfy the general contract for the <tt>Object.hashCode</tt>method.
In particular, <tt>c1.equals(c2)</tt> implies that
<tt>c1.hashCode()==c2.hashCode()</tt>.

@return the hash code value for this collection

@see Object#hashCode()
@see Object#equals(Object)"
      end
    end

    class 136199 "Iterator"
      visibility package stereotype "interface"
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 136455 "ListIterator"
      visibility package stereotype "interface"
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 141191 "Map"
      visibility package stereotype "interface"
      nformals 2
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 172039 "Observable"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents an observable object, or \"data\"
in the model-view paradigm. It can be subclassed to represent an
object that the application wants to have observed.
<p>
An observable object can have one or more observers. An observer
may be any object that implements interface <tt>Observer</tt>. After an
observable instance changes, an application calling the
<code>Observable</code>'s <code>notifyObservers</code> method
causes all of its observers to be notified of the change by a call
to their <code>update</code> method.
<p>
The order in which notifications will be delivered is unspecified.
The default implementation provided in the Observable class will
notify Observers in the order in which they registered interest, but
subclasses may change this order, use no guaranteed order, deliver
notifications on separate threads, or may guarantee that their
subclass follows this order, as they choose.
<p>
Note that this notification mechanism is has nothing to do with threads
and is completely separate from the <tt>wait</tt> and <tt>notify</tt>
mechanism of class <tt>Object</tt>.
<p>
When an observable object is newly created, its set of observers is
empty. Two observers are considered the same if and only if the
<tt>equals</tt> method returns true for them.

@author  Chris Warth
@see     java.util.Observable#notifyObservers()
@see     java.util.Observable#notifyObservers(java.lang.Object)
@see     java.util.Observer
@see     java.util.Observer#update(java.util.Observable, java.lang.Object)
@since   JDK1.0"
      operation 183175 "Observable"
	public explicit_return_type ""
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Construct an Observable with zero Observers. "
      end

      operation 183303 "addObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 172295 // Observer
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an observer to the set of observers for this object, provided
that it is not the same as some observer already in the set.
The order in which notifications will be delivered to multiple
observers is not specified. See the class comment.

@param   o   an observer to be added.
@throws NullPointerException   if the parameter o is null."
      end

      operation 183431 "deleteObserver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 172295 // Observer
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes an observer from the set of observers of this object.
Passing <CODE>null</CODE> to this method will have no effect.
@param   o   the observer to be deleted."
      end

      operation 183559 "notifyObservers"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this object has changed, as indicated by the
<code>hasChanged</code> method, then notify all of its observers
and then call the <code>clearChanged</code> method to
indicate that this object has no longer changed.
<p>
Each observer has its <code>update</code> method called with two
arguments: this observable object and <code>null</code>. In other
words, this method is equivalent to:
<blockquote><tt>
notifyObservers(null)</tt></blockquote>

@see     java.util.Observable#clearChanged()
@see     java.util.Observable#hasChanged()
@see     java.util.Observer#update(java.util.Observable, java.lang.Object)"
      end

      operation 183687 "notifyObservers"
	public explicit_return_type "void"
	nparams 1
	  param inout name "arg" type class_ref 136327 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this object has changed, as indicated by the
<code>hasChanged</code> method, then notify all of its observers
and then call the <code>clearChanged</code> method to indicate
that this object has no longer changed.
<p>
Each observer has its <code>update</code> method called with two
arguments: this observable object and the <code>arg</code> argument.

@param   arg   any object.
@see     java.util.Observable#clearChanged()
@see     java.util.Observable#hasChanged()
@see     java.util.Observer#update(java.util.Observable, java.lang.Object)"
      end

      operation 183815 "deleteObservers"
	public explicit_return_type "void"
	nparams 0
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears the observer list so that this object no longer has any observers."
      end

      operation 183943 "setChanged"
	protected explicit_return_type "void"
	nparams 0
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks this <tt>Observable</tt> object as having been changed; the
<tt>hasChanged</tt> method will now return <tt>true</tt>."
      end

      operation 184071 "clearChanged"
	protected explicit_return_type "void"
	nparams 0
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates that this object has no longer changed, or that it has
already notified all of its observers of its most recent change,
so that the <tt>hasChanged</tt> method will now return <tt>false</tt>.
This method is called automatically by the
<code>notifyObservers</code> methods.

@see     java.util.Observable#notifyObservers()
@see     java.util.Observable#notifyObservers(java.lang.Object)"
      end

      operation 184199 "hasChanged"
	public explicit_return_type "boolean"
	nparams 0
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this object has changed.

@return  <code>true</code> if and only if the <code>setChanged</code>
         method has been called more recently than the
         <code>clearChanged</code> method on this object;
         <code>false</code> otherwise.
@see     java.util.Observable#clearChanged()
@see     java.util.Observable#setChanged()"
      end

      operation 184327 "countObservers"
	public explicit_return_type "int"
	nparams 0
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of observers of this <tt>Observable</tt> object.

@return  the number of observers of this object."
      end
    end

    class 172167 "Vector"
      visibility package 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 172295 "Observer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class can implement the <code>Observer</code> interface when it
wants to be informed of changes in observable objects.

@author  Chris Warth
@see     java.util.Observable
@since   JDK1.0"
      operation 184455 "update"
	public explicit_return_type "void"
	nparams 2
	  param inout name "o" type class_ref 172039 // Observable
	  param inout name "arg" type class_ref 136327 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called whenever the observed object is changed. An
application calls an <tt>Observable</tt> object's
<code>notifyObservers</code> method to have all the object's
observers notified of the change.

@param   o     the observable object.
@param   arg   an argument passed to the <code>notifyObservers</code>
                method."
      end
    end
  end
end
