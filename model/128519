format 70
"lang" // src::java::lang
  revision 6
  modified_by 7 "algassimou"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/lang"
  java_package "java.lang"
  classview 128263 "lang"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 128519 "Runnable"
      abstract visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Runnable</code> interface should be implemented by any
class whose instances are intended to be executed by a thread. The
class must define a method of no arguments called <code>run</code>.
<p>
This interface is designed to provide a common protocol for objects that
wish to execute code while they are active. For example,
<code>Runnable</code> is implemented by class <code>Thread</code>.
Being active simply means that a thread has been started and has not
yet been stopped.
<p>
In addition, <code>Runnable</code> provides the means for a class to be
active while not subclassing <code>Thread</code>. A class that implements
<code>Runnable</code> can run without subclassing <code>Thread</code>
by instantiating a <code>Thread</code> instance and passing itself in
as the target.  In most cases, the <code>Runnable</code> interface should
be used if you are only planning to override the <code>run()</code>
method and no other <code>Thread</code> methods.
This is important because classes should not be subclassed
unless the programmer intends on modifying or enhancing the fundamental
behavior of the class.

@author  Arthur van Hoff
@see     java.lang.Thread
@see     java.util.concurrent.Callable
@since   JDK1.0"
      operation 128135 "run"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "When an object implementing interface <code>Runnable</code> is used
to create a thread, starting the thread causes the object's
<code>run</code> method to be called in that separately executing
thread.
<p>
The general contract of the method <code>run</code> is that it may
take any action whatsoever.

@see     java.lang.Thread#run()"
      end
    end

    class 136071 "Iterable"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Implementing this interface allows an object to be the target of
 the \"foreach\" statement.
@since 1.5"
      operation 134663 "iterator"
	public return_type class_ref 136199 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over a set of elements of type T.

@return an Iterator."
      end
    end

    class 136327 "Object"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 136583 "Exception"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The class <code>Exception</code> and its subclasses are a form of
<code>Throwable</code> that indicates conditions that a reasonable
application might want to catch.

@author  Frank Yellin
@see     java.lang.Error
@since   JDK1.0"
      classrelation 136711 // <generalisation>
	relation 136711 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 136711 // <generalisation>
	  b parent class_ref 136711 // Throwable
      end

      attribute 141063 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -3387516993124229948L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 141959 "Exception"
	public explicit_return_type ""
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with <code>null</code> as its detail message.
The cause is not initialized, and may subsequently be initialized by a
call to {@link #initCause}."
      end

      operation 142087 "Exception"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 136967 // String
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with the specified detail message.  The
cause is not initialized, and may subsequently be initialized by
a call to {@link #initCause}.

@param   message   the detail message. The detail message is saved for
         later retrieval by the {@link #getMessage()} method."
      end

      operation 142215 "Exception"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 136967 // String
	  param inout name "cause" type class_ref 136711 // Throwable
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with the specified detail message and
cause.  <p>Note that the detail message associated with
<code>cause</code> is <i>not</i> automatically incorporated in
this exception's detail message.

@param  message the detail message (which is saved for later retrieval
        by the {@link #getMessage()} method).
@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.4"
      end

      operation 142343 "Exception"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 136711 // Throwable
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with the specified cause and a detail
message of <tt>(cause==null ? null : cause.toString())</tt> (which
typically contains the class and detail message of <tt>cause</tt>).
This constructor is useful for exceptions that are little more than
wrappers for other throwables (for example, {@link
java.security.PrivilegedActionException}).

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.4"
      end
    end

    class 136711 "Throwable"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Throwable</code> class is the superclass of all errors and
exceptions in the Java language. Only objects that are instances of this
class (or one of its subclasses) are thrown by the Java Virtual Machine or
can be thrown by the Java <code>throw</code> statement. Similarly, only
this class or one of its subclasses can be the argument type in a
<code>catch</code> clause.

<p>Instances of two subclasses, {@link java.lang.Error} and
{@link java.lang.Exception}, are conventionally used to indicate
that exceptional situations have occurred. Typically, these instances
are freshly created in the context of the exceptional situation so
as to include relevant information (such as stack trace data).

<p>A throwable contains a snapshot of the execution stack of its thread at
the time it was created. It can also contain a message string that gives
more information about the error. Finally, it can contain a <i>cause</i>:
another throwable that caused this throwable to get thrown.  The cause
facility is new in release 1.4.  It is also known as the <i>chained
exception</i> facility, as the cause can, itself, have a cause, and so on,
leading to a \"chain\" of exceptions, each caused by another.

<p>One reason that a throwable may have a cause is that the class that
throws it is built atop a lower layered abstraction, and an operation on
the upper layer fails due to a failure in the lower layer.  It would be bad
design to let the throwable thrown by the lower layer propagate outward, as
it is generally unrelated to the abstraction provided by the upper layer.
Further, doing so would tie the API of the upper layer to the details of
its implementation, assuming the lower layer's exception was a checked
exception.  Throwing a \"wrapped exception\" (i.e., an exception containing a
cause) allows the upper layer to communicate the details of the failure to
its caller without incurring either of these shortcomings.  It preserves
the flexibility to change the implementation of the upper layer without
changing its API (in particular, the set of exceptions thrown by its
methods).

<p>A second reason that a throwable may have a cause is that the method
that throws it must conform to a general-purpose interface that does not
permit the method to throw the cause directly.  For example, suppose
a persistent collection conforms to the {@link java.util.Collection
Collection} interface, and that its persistence is implemented atop
<tt>java.io</tt>.  Suppose the internals of the <tt>add</tt> method
can throw an {@link java.io.IOException IOException}.  The implementation
can communicate the details of the <tt>IOException</tt> to its caller
while conforming to the <tt>Collection</tt> interface by wrapping the
<tt>IOException</tt> in an appropriate unchecked exception.  (The
specification for the persistent collection should indicate that it is
capable of throwing such exceptions.)

<p>A cause can be associated with a throwable in two ways: via a
constructor that takes the cause as an argument, or via the
{@link #initCause(Throwable)} method.  New throwable classes that
wish to allow causes to be associated with them should provide constructors
that take a cause and delegate (perhaps indirectly) to one of the
<tt>Throwable</tt> constructors that takes a cause.  For example:
<pre>
    try {
        lowLevelOp();
    } catch (LowLevelException le) {
        throw new HighLevelException(le);  // Chaining-aware constructor
    }
</pre>
Because the <tt>initCause</tt> method is public, it allows a cause to be
associated with any throwable, even a \"legacy throwable\" whose
implementation predates the addition of the exception chaining mechanism to
<tt>Throwable</tt>. For example:
<pre>
    try {
        lowLevelOp();
    } catch (LowLevelException le) {
        throw (HighLevelException)
new HighLevelException().initCause(le);  // Legacy constructor
    }
</pre>

<p>Prior to release 1.4, there were many throwables that had their own
non-standard exception chaining mechanisms (
{@link ExceptionInInitializerError}, {@link ClassNotFoundException},
{@link java.lang.reflect.UndeclaredThrowableException},
{@link java.lang.reflect.InvocationTargetException},
{@link java.io.WriteAbortedException},
{@link java.security.PrivilegedActionException},
{@link java.awt.print.PrinterIOException},
{@link java.rmi.RemoteException} and
{@link javax.naming.NamingException}).
All of these throwables have been retrofitted to
use the standard exception chaining mechanism, while continuing to
implement their \"legacy\" chaining mechanisms for compatibility.

<p>Further, as of release 1.4, many general purpose <tt>Throwable</tt>
classes (for example {@link Exception}, {@link RuntimeException},
{@link Error}) have been retrofitted with constructors that take
a cause.  This was not strictly necessary, due to the existence of the
<tt>initCause</tt> method, but it is more convenient and expressive to
delegate to a constructor that takes a cause.

<p>By convention, class <code>Throwable</code> and its subclasses have two
constructors, one that takes no arguments and one that takes a
<code>String</code> argument that can be used to produce a detail message.
Further, those subclasses that might likely have a cause associated with
them should have two more constructors, one that takes a
<code>Throwable</code> (the cause), and one that takes a
<code>String</code> (the detail message) and a <code>Throwable</code> (the
cause).

<p>Also introduced in release 1.4 is the {@link #getStackTrace()} method,
which allows programmatic access to the stack trace information that was
previously available only in text form, via the various forms of the
{@link #printStackTrace()} method.  This information has been added to the
<i>serialized representation</i> of this class so <tt>getStackTrace</tt>
and <tt>printStackTrace</tt> will operate properly on a throwable that
was obtained by deserialization.

@author  unascribed
@author  Josh Bloch (Added exception chaining and programmatic access to
         stack trace in 1.4.)
@since JDK1.0"
      classrelation 136583 // <realization>
	relation 136583 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 136583 // <realization>
	  b parent class_ref 136839 // Serializable
      end

      operation 140039 "Throwable"
	public explicit_return_type ""
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This field is lazily initialized on first use or serialization and
nulled out when fillInStackTrace is called.


Constructs a new throwable with <code>null</code> as its detail message.
The cause is not initialized, and may subsequently be initialized by a
call to {@link #initCause}.

<p>The {@link #fillInStackTrace()} method is called to initialize
the stack trace data in the newly created throwable."
      end

      operation 140167 "Throwable"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 136967 // String
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new throwable with the specified detail message.  The
cause is not initialized, and may subsequently be initialized by
a call to {@link #initCause}.

<p>The {@link #fillInStackTrace()} method is called to initialize
the stack trace data in the newly created throwable.

@param   message   the detail message. The detail message is saved for
         later retrieval by the {@link #getMessage()} method."
      end

      operation 140295 "Throwable"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 136967 // String
	  param inout name "cause" type class_ref 136711 // Throwable
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new throwable with the specified detail message and
cause.  <p>Note that the detail message associated with
<code>cause</code> is <i>not</i> automatically incorporated in
this throwable's detail message.

<p>The {@link #fillInStackTrace()} method is called to initialize
the stack trace data in the newly created throwable.

@param  message the detail message (which is saved for later retrieval
        by the {@link #getMessage()} method).
@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.4"
      end

      operation 140423 "Throwable"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 136711 // Throwable
	
	java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new throwable with the specified cause and a detail
message of <tt>(cause==null ? null : cause.toString())</tt> (which
typically contains the class and detail message of <tt>cause</tt>).
This constructor is useful for throwables that are little more than
wrappers for other throwables (for example, {@link
java.security.PrivilegedActionException}).

<p>The {@link #fillInStackTrace()} method is called to initialize
the stack trace data in the newly created throwable.

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.4"
      end

      operation 140551 "getMessage"
	public return_type class_ref 136967 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the detail message string of this throwable.

@return  the detail message string of this <tt>Throwable</tt> instance
         (which may be <tt>null</tt>)."
      end

      operation 140679 "getLocalizedMessage"
	public return_type class_ref 136967 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a localized description of this throwable.
Subclasses may override this method in order to produce a
locale-specific message.  For subclasses that do not override this
method, the default implementation returns the same result as
<code>getMessage()</code>.

@return  The localized description of this throwable.
@since   JDK1.1"
      end

      operation 140807 "getCause"
	public return_type class_ref 136711 // Throwable
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cause of this throwable or <code>null</code> if the
cause is nonexistent or unknown.  (The cause is the throwable that
caused this throwable to get thrown.)

<p>This implementation returns the cause that was supplied via one of
the constructors requiring a <tt>Throwable</tt>, or that was set after
creation with the {@link #initCause(Throwable)} method.  While it is
typically unnecessary to override this method, a subclass can override
it to return a cause set by some other means.  This is appropriate for
a \"legacy chained throwable\" that predates the addition of chained
exceptions to <tt>Throwable</tt>.  Note that it is <i>not</i>
necessary to override any of the <tt>PrintStackTrace</tt> methods,
all of which invoke the <tt>getCause</tt> method to determine the
cause of a throwable.

@return  the cause of this throwable or <code>null</code> if the
         cause is nonexistent or unknown.
@since 1.4"
      end

      operation 140935 "initCause"
	public return_type class_ref 136711 // Throwable
	nparams 1
	  param inout name "cause" type class_ref 136711 // Throwable
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the <i>cause</i> of this throwable to the specified value.
(The cause is the throwable that caused this throwable to get thrown.)

<p>This method can be called at most once.  It is generally called from
within the constructor, or immediately after creating the
throwable.  If this throwable was created
with {@link #Throwable(Throwable)} or
{@link #Throwable(String,Throwable)}, this method cannot be called
even once.

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@return  a reference to this <code>Throwable</code> instance.
@throws IllegalArgumentException if <code>cause</code> is this
        throwable.  (A throwable cannot be its own cause.)
@throws IllegalStateException if this throwable was
        created with {@link #Throwable(Throwable)} or
        {@link #Throwable(String,Throwable)}, or this method has already
        been called on this throwable.
@since  1.4"
      end

      operation 141063 "toString"
	public return_type class_ref 136967 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a short description of this throwable.
The result is the concatenation of:
<ul>
<li> the {@linkplain Class#getName() name} of the class of this object
<li> \": \" (a colon and a space)
<li> the result of invoking this object's {@link #getLocalizedMessage}
     method
</ul>
If <tt>getLocalizedMessage</tt> returns <tt>null</tt>, then just
the class name is returned.

@return a string representation of this throwable."
      end

      operation 141191 "printStackTrace"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints this throwable and its backtrace to the
standard error stream. This method prints a stack trace for this
<code>Throwable</code> object on the error output stream that is
the value of the field <code>System.err</code>. The first line of
output contains the result of the {@link #toString()} method for
this object.  Remaining lines represent data previously recorded by
the method {@link #fillInStackTrace()}. The format of this
information depends on the implementation, but the following
example may be regarded as typical:
<blockquote><pre>
java.lang.NullPointerException
        at MyClass.mash(MyClass.java:9)
        at MyClass.crunch(MyClass.java:6)
        at MyClass.main(MyClass.java:3)
</pre></blockquote>
This example was produced by running the program:
<pre>
class MyClass {
    public static void main(String[] args) {
        crunch(null);
    }
    static void crunch(int[] a) {
        mash(a);
    }
    static void mash(int[] b) {
        System.out.println(b[0]);
    }
}
</pre>
The backtrace for a throwable with an initialized, non-null cause
should generally include the backtrace for the cause.  The format
of this information depends on the implementation, but the following
example may be regarded as typical:
<pre>
HighLevelException: MidLevelException: LowLevelException
        at Junk.a(Junk.java:13)
        at Junk.main(Junk.java:4)
Caused by: MidLevelException: LowLevelException
        at Junk.c(Junk.java:23)
        at Junk.b(Junk.java:17)
        at Junk.a(Junk.java:11)
        ... 1 more
Caused by: LowLevelException
        at Junk.e(Junk.java:30)
        at Junk.d(Junk.java:27)
        at Junk.c(Junk.java:21)
        ... 3 more
</pre>
Note the presence of lines containing the characters <tt>\"...\"</tt>.
These lines indicate that the remainder of the stack trace for this
exception matches the indicated number of frames from the bottom of the
stack trace of the exception that was caused by this exception (the
\"enclosing\" exception).  This shorthand can greatly reduce the length
of the output in the common case where a wrapped exception is thrown
from same method as the \"causative exception\" is caught.  The above
example was produced by running the program:
<pre>
public class Junk {
    public static void main(String args[]) {
        try {
            a();
        } catch(HighLevelException e) {
            e.printStackTrace();
        }
    }
    static void a() throws HighLevelException {
        try {
            b();
        } catch(MidLevelException e) {
            throw new HighLevelException(e);
        }
    }
    static void b() throws MidLevelException {
        c();
    }
    static void c() throws MidLevelException {
        try {
            d();
        } catch(LowLevelException e) {
            throw new MidLevelException(e);
        }
    }
    static void d() throws LowLevelException {
       e();
    }
    static void e() throws LowLevelException {
        throw new LowLevelException();
    }
}

class HighLevelException extends Exception {
    HighLevelException(Throwable cause) { super(cause); }
}

class MidLevelException extends Exception {
    MidLevelException(Throwable cause)  { super(cause); }
}

class LowLevelException extends Exception {
}
</pre>"
      end

      operation 141319 "printStackTrace"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 137223 // PrintStream
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints this throwable and its backtrace to the specified print stream.

@param s <code>PrintStream</code> to use for output"
      end

      operation 141447 "printStackTrace"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 137351 // PrintWriter
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints this throwable and its backtrace to the specified
print writer.

@param s <code>PrintWriter</code> to use for output
@since   JDK1.1"
      end

      operation 141575 "fillInStackTrace"
	public return_type class_ref 136711 // Throwable
	nparams 0
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
"
	
	
	
	comment "Fills in the execution stack trace. This method records within this
<code>Throwable</code> object information about the current state of
the stack frames for the current thread.

@return  a reference to this <code>Throwable</code> instance.
@see     java.lang.Throwable#printStackTrace()"
      end

      operation 141703 "getStackTrace"
	public return_type class_ref 137095 // StackTraceElement
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides programmatic access to the stack trace information printed by
{@link #printStackTrace()}.  Returns an array of stack trace elements,
each representing one stack frame.  The zeroth element of the array
(assuming the array's length is non-zero) represents the top of the
stack, which is the last method invocation in the sequence.  Typically,
this is the point at which this throwable was created and thrown.
The last element of the array (assuming the array's length is non-zero)
represents the bottom of the stack, which is the first method invocation
in the sequence.

<p>Some virtual machines may, under some circumstances, omit one
or more stack frames from the stack trace.  In the extreme case,
a virtual machine that has no stack trace information concerning
this throwable is permitted to return a zero-length array from this
method.  Generally speaking, the array returned by this method will
contain one element for every frame that would be printed by
<tt>printStackTrace</tt>.

@return an array of stack trace elements representing the stack trace
        pertaining to this throwable.
@since  1.4"
      end

      operation 141831 "setStackTrace"
	public explicit_return_type "void"
	nparams 1
	  param inout name "stackTrace" type class_ref 137095 // StackTraceElement
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the stack trace elements that will be returned by
{@link #getStackTrace()} and printed by {@link #printStackTrace()}
and related methods.

This method, which is designed for use by RPC frameworks and other
advanced systems, allows the client to override the default
stack trace that is either generated by {@link #fillInStackTrace()}
when a throwable is constructed or deserialized when a throwable is
read from a serialization stream.

@param   stackTrace the stack trace elements to be associated with
this <code>Throwable</code>.  The specified array is copied by this
call; changes in the specified array after the method invocation
returns will have no affect on this <code>Throwable</code>'s stack
trace.

@throws NullPointerException if <code>stackTrace</code> is
        <code>null</code>, or if any of the elements of
        <code>stackTrace</code> are <code>null</code>

@since  1.4"
      end
    end

    class 136967 "String"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 137095 "StackTraceElement"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 137607 "Class"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Instances of the class {@code Class} represent classes and
interfaces in a running Java application.  An enum is a kind of
class and an annotation is a kind of interface.  Every array also
belongs to a class that is reflected as a {@code Class} object
that is shared by all arrays with the same element type and number
of dimensions.  The primitive Java types ({@code boolean},
{@code byte}, {@code char}, {@code short},
{@code int}, {@code long}, {@code float}, and
{@code double}), and the keyword {@code void} are also
represented as {@code Class} objects.

<p> {@code Class} has no public constructor. Instead {@code Class}
objects are constructed automatically by the Java Virtual Machine as classes
are loaded and by calls to the {@code defineClass} method in the class
loader.

<p> The following example uses a {@code Class} object to print the
class name of an object:

<p> <blockquote><pre>
    void printClassName(Object obj) {
        System.out.println(\"The class of \" + obj +
                           \" is \" + obj.getClass().getName());
    }
</pre></blockquote>

<p> It is also possible to get the {@code Class} object for a named
type (or for void) using a class literal
(JLS Section <A HREF=\"http://java.sun.com/docs/books/jls/second_edition/html/expressions.doc.html#251530\">15.8.2</A>).
For example:

<p> <blockquote>
    {@code System.out.println(\"The name of class Foo is: \"+Foo.class.getName());}
</blockquote>

@param <T> the type of the class modeled by this {@code Class}
object.  For example, the type of {@code String.class} is {@code
Class<String>}.  Use {@code Class<?>} if the class being modeled is
unknown.

@author  unascribed
@see     java.lang.ClassLoader#defineClass(byte[], int, int)
@since   JDK1.0"
      classrelation 137223 // <realization>
	relation 137223 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 137223 // <realization>
	  b parent class_ref 136839 // Serializable
      end

      classrelation 137351 // <realization>
	relation 137351 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 137351 // <realization>
	  b parent class_ref 137735 // GenericDeclaration
      end

      classrelation 137479 // <realization>
	relation 137479 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 137479 // <realization>
	  b parent class_ref 137991 // Type
      end

      classrelation 137607 // <realization>
	relation 137607 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 137607 // <realization>
	  b parent class_ref 138119 // AnnotatedElement
      end

      operation 143495 "toString"
	public return_type class_ref 136967 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the object to a string. The string representation is the
string \"class\" or \"interface\", followed by a space, and then by the
fully qualified name of the class in the format returned by
{@code getName}.  If this {@code Class} object represents a
primitive type, this method returns the name of the primitive type.  If
this {@code Class} object represents void this method returns
\"void\".

@return a string representation of this class object."
      end

      operation 143623 "forName"
	class_operation public return_type class_ref 137607 // Class
	nparams 1
	  param inout name "className" type class_ref 136967 // String
	nexceptions 1
	  exception class_ref 138375 // ClassNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code Class} object associated with the class or
interface with the given string name.  Invoking this method is
equivalent to:

<blockquote>
 {@code Class.forName(className, true, currentLoader)}
</blockquote>

where {@code currentLoader} denotes the defining class loader of
the current class.

<p> For example, the following code fragment returns the
runtime {@code Class} descriptor for the class named
{@code java.lang.Thread}:

<blockquote>
  {@code Class t = Class.forName(\"java.lang.Thread\")}
</blockquote>
<p>
A call to {@code forName(\"X\")} causes the class named
{@code X} to be initialized.

@param      className   the fully qualified name of the desired class.
@return     the {@code Class} object for the class with the
            specified name.
@exception LinkageError if the linkage fails
@exception ExceptionInInitializerError if the initialization provoked
           by this method fails
@exception ClassNotFoundException if the class cannot be located"
      end

      operation 143751 "forName"
	class_operation public return_type class_ref 137607 // Class
	nparams 3
	  param inout name "name" type class_ref 136967 // String
	  param inout name "initialize" explicit_type "boolean"
	  param inout name "loader" type class_ref 138503 // ClassLoader
	nexceptions 1
	  exception class_ref 138375 // ClassNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code Class} object associated with the class or
interface with the given string name, using the given class loader.
Given the fully qualified name for a class or interface (in the same
format returned by {@code getName}) this method attempts to
locate, load, and link the class or interface.  The specified class
loader is used to load the class or interface.  If the parameter
{@code loader} is null, the class is loaded through the bootstrap
class loader.  The class is initialized only if the
{@code initialize} parameter is {@code true} and if it has
not been initialized earlier.

<p> If {@code name} denotes a primitive type or void, an attempt
will be made to locate a user-defined class in the unnamed package whose
name is {@code name}. Therefore, this method cannot be used to
obtain any of the {@code Class} objects representing primitive
types or void.

<p> If {@code name} denotes an array class, the component type of
the array class is loaded but not initialized.

<p> For example, in an instance method the expression:

<blockquote>
 {@code Class.forName(\"Foo\")}
</blockquote>

is equivalent to:

<blockquote>
 {@code Class.forName(\"Foo\", true, this.getClass().getClassLoader())}
</blockquote>

Note that this method throws errors related to loading, linking or
initializing as specified in Sections 12.2, 12.3 and 12.4 of <em>The
Java Language Specification</em>.
Note that this method does not check whether the requested class
is accessible to its caller.

<p> If the {@code loader} is {@code null}, and a security
manager is present, and the caller's class loader is not null, then this
method calls the security manager's {@code checkPermission} method
with a {@code RuntimePermission(\"getClassLoader\")} permission to
ensure it's ok to access the bootstrap class loader.

@param name       fully qualified name of the desired class
@param initialize whether the class must be initialized
@param loader     class loader from which the class must be loaded
@return           class object representing the desired class

@exception LinkageError if the linkage fails
@exception ExceptionInInitializerError if the initialization provoked
           by this method fails
@exception ClassNotFoundException if the class cannot be located by
           the specified class loader

@see       java.lang.Class#forName(String)
@see       java.lang.ClassLoader
@since     1.2"
      end

      operation 143879 "newInstance"
	public explicit_return_type "T"
	nparams 0
	nexceptions 2
	  exception class_ref 138631 // InstantiationException
	  exception class_ref 138759 // IllegalAccessException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of the class represented by this {@code Class}
object.  The class is instantiated as if by a {@code new}
expression with an empty argument list.  The class is initialized if it
has not already been initialized.

<p>Note that this method propagates any exception thrown by the
nullary constructor, including a checked exception.  Use of
this method effectively bypasses the compile-time exception
checking that would otherwise be performed by the compiler.
The {@link
java.lang.reflect.Constructor#newInstance(java.lang.Object...)
Constructor.newInstance} method avoids this problem by wrapping
any exception thrown by the constructor in a (checked) {@link
java.lang.reflect.InvocationTargetException}.

@return     a newly allocated instance of the class represented by this
            object.
@exception  IllegalAccessException  if the class or its nullary
              constructor is not accessible.
@exception  InstantiationException
              if this {@code Class} represents an abstract class,
              an interface, an array class, a primitive type, or void;
              or if the class has no nullary constructor;
              or if the instantiation fails for some other reason.
@exception  ExceptionInInitializerError if the initialization
              provoked by this method fails.
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)} denies
            creation of new instances of this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>
"
      end

      operation 144007 "isInstance"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 136327 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment "Determines if the specified {@code Object} is assignment-compatible
with the object represented by this {@code Class}.  This method is
the dynamic equivalent of the Java language {@code instanceof}
operator. The method returns {@code true} if the specified
{@code Object} argument is non-null and can be cast to the
reference type represented by this {@code Class} object without
raising a {@code ClassCastException.} It returns {@code false}
otherwise.

<p> Specifically, if this {@code Class} object represents a
declared class, this method returns {@code true} if the specified
{@code Object} argument is an instance of the represented class (or
of any of its subclasses); it returns {@code false} otherwise. If
this {@code Class} object represents an array class, this method
returns {@code true} if the specified {@code Object} argument
can be converted to an object of the array class by an identity
conversion or by a widening reference conversion; it returns
{@code false} otherwise. If this {@code Class} object
represents an interface, this method returns {@code true} if the
class or any superclass of the specified {@code Object} argument
implements this interface; it returns {@code false} otherwise. If
this {@code Class} object represents a primitive type, this method
returns {@code false}.

@param   obj the object to check
@return  true if {@code obj} is an instance of this class

@since JDK1.1"
      end

      operation 144135 "isAssignableFrom"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "cls" type class_ref 137607 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}${)}${throws};
"
	
	
	
	comment "Determines if the class or interface represented by this
{@code Class} object is either the same as, or is a superclass or
superinterface of, the class or interface represented by the specified
{@code Class} parameter. It returns {@code true} if so;
otherwise it returns {@code false}. If this {@code Class}
object represents a primitive type, this method returns
{@code true} if the specified {@code Class} parameter is
exactly this {@code Class} object; otherwise it returns
{@code false}.

<p> Specifically, this method tests whether the type represented by the
specified {@code Class} parameter can be converted to the type
represented by this {@code Class} object via an identity conversion
or via a widening reference conversion. See <em>The Java Language
Specification</em>, sections 5.1.1 and 5.1.4 , for details.

@param cls the {@code Class} object to be checked
@return the {@code boolean} value indicating whether objects of the
type {@code cls} can be assigned to objects of this class
@exception NullPointerException if the specified Class parameter is
           null.
@since JDK1.1"
      end

      operation 144263 "isInterface"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
"
	
	
	
	comment "Determines if the specified {@code Class} object represents an
interface type.

@return  {@code true} if this object represents an interface;
         {@code false} otherwise."
      end

      operation 144391 "isArray"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
"
	
	
	
	comment "Determines if this {@code Class} object represents an array class.

@return  {@code true} if this object represents an array class;
         {@code false} otherwise.
@since   JDK1.1"
      end

      operation 144519 "isPrimitive"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
"
	
	
	
	comment "Determines if the specified {@code Class} object represents a
primitive type.

<p> There are nine predefined {@code Class} objects to represent
the eight primitive types and void.  These are created by the Java
Virtual Machine, and have the same names as the primitive types that
they represent, namely {@code boolean}, {@code byte},
{@code char}, {@code short}, {@code int},
{@code long}, {@code float}, and {@code double}.

<p> These objects may only be accessed via the following public static
final variables, and are the only {@code Class} objects for which
this method returns {@code true}.

@return true if and only if this class represents a primitive type

@see     java.lang.Boolean#TYPE
@see     java.lang.Character#TYPE
@see     java.lang.Byte#TYPE
@see     java.lang.Short#TYPE
@see     java.lang.Integer#TYPE
@see     java.lang.Long#TYPE
@see     java.lang.Float#TYPE
@see     java.lang.Double#TYPE
@see     java.lang.Void#TYPE
@since JDK1.1"
      end

      operation 144647 "isAnnotation"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this {@code Class} object represents an annotation
type.  Note that if this method returns true, {@link #isInterface()}
would also return true, as all annotation types are also interfaces.

@return {@code true} if this class object represents an annotation
     type; {@code false} otherwise
@since 1.5"
      end

      operation 144775 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this class is a synthetic class;
returns {@code false} otherwise.
@return {@code true} if and only if this class is a synthetic class as
        defined by the Java Language Specification.
@since 1.5"
      end

      operation 144903 "getName"
	public return_type class_ref 136967 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the  name of the entity (class, interface, array class,
primitive type, or void) represented by this {@code Class} object,
as a {@code String}.

<p> If this class object represents a reference type that is not an
array type then the binary name of the class is returned, as specified
by the Java Language Specification, Second Edition.

<p> If this class object represents a primitive type or void, then the
name returned is a {@code String} equal to the Java language
keyword corresponding to the primitive type or void.

<p> If this class object represents a class of arrays, then the internal
form of the name consists of the name of the element type preceded by
one or more '{@code [}' characters representing the depth of the array
nesting.  The encoding of element type names is as follows:

<blockquote><table summary=\"Element types and encodings\">
<tr><th> Element Type <th> &nbsp;&nbsp;&nbsp; <th> Encoding
<tr><td> boolean      <td> &nbsp;&nbsp;&nbsp; <td align=center> Z
<tr><td> byte         <td> &nbsp;&nbsp;&nbsp; <td align=center> B
<tr><td> char         <td> &nbsp;&nbsp;&nbsp; <td align=center> C
<tr><td> class or interface
                      <td> &nbsp;&nbsp;&nbsp; <td align=center> L<i>classname</i>;
<tr><td> double       <td> &nbsp;&nbsp;&nbsp; <td align=center> D
<tr><td> float        <td> &nbsp;&nbsp;&nbsp; <td align=center> F
<tr><td> int          <td> &nbsp;&nbsp;&nbsp; <td align=center> I
<tr><td> long         <td> &nbsp;&nbsp;&nbsp; <td align=center> J
<tr><td> short        <td> &nbsp;&nbsp;&nbsp; <td align=center> S
</table></blockquote>

<p> The class or interface name <i>classname</i> is the binary name of
the class specified above.

<p> Examples:
<blockquote><pre>
String.class.getName()
    returns \"java.lang.String\"
byte.class.getName()
    returns \"byte\"
(new Object[3]).getClass().getName()
    returns \"[Ljava.lang.Object;\"
(new int[3][4][5][6][7][8][9]).getClass().getName()
    returns \"[[[[[[[I\"
</pre></blockquote>

@return  the name of the class or interface
         represented by this object."
      end

      operation 145031 "getClassLoader"
	public return_type class_ref 138503 // ClassLoader
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class loader for the class.  Some implementations may use
null to represent the bootstrap class loader. This method will return
null in such implementations if this class was loaded by the bootstrap
class loader.

<p> If a security manager is present, and the caller's class loader is
not null and the caller's class loader is not the same as or an ancestor of
the class loader for the class whose class loader is requested, then
this method calls the security manager's {@code checkPermission}
method with a {@code RuntimePermission(\"getClassLoader\")}
permission to ensure it's ok to access the class loader for the class.

<p>If this object
represents a primitive type or void, null is returned.

@return  the class loader that loaded the class or interface
         represented by this object.
@throws SecurityException
   if a security manager exists and its
   {@code checkPermission} method denies
   access to the class loader for the class.
@see java.lang.ClassLoader
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission"
      end

      operation 145159 "getClassLoader0"
	package return_type class_ref 138503 // ClassLoader
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
"
	
	
	
	comment " Package-private to allow ClassLoader access"
      end

      operation 145287 "getTypeParameters"
	public return_type class_ref 137863 // TypeVariable
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Class<T>>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code TypeVariable} objects that represent the
type variables declared by the generic declaration represented by this
{@code GenericDeclaration} object, in declaration order.  Returns an
array of length 0 if the underlying generic declaration declares no type
variables.

@return an array of {@code TypeVariable} objects that represent
    the type variables declared by this generic declaration
@throws GenericSignatureFormatError if the generic
    signature of this generic declaration does not conform to
    the format specified in the Java Virtual Machine Specification,
    3rd edition
@since 1.5"
      end

      operation 145415 "getSuperclass"
	public return_type class_ref 137607 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}<? super T> ${name}${(}${)}${throws};
"
	
	
	
	comment "Returns the {@code Class} representing the superclass of the entity
(class, interface, primitive type or void) represented by this
{@code Class}.  If this {@code Class} represents either the
{@code Object} class, an interface, a primitive type, or void, then
null is returned.  If this object represents an array class then the
{@code Class} object representing the {@code Object} class is
returned.

@return the superclass of the class represented by this object."
      end

      operation 145543 "getGenericSuperclass"
	public return_type class_ref 137991 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code Type} representing the direct superclass of
the entity (class, interface, primitive type or void) represented by
this {@code Class}.

<p>If the superclass is a parameterized type, the {@code Type}
object returned must accurately reflect the actual type
parameters used in the source code. The parameterized type
representing the superclass is created if it had not been
created before. See the declaration of {@link
java.lang.reflect.ParameterizedType ParameterizedType} for the
semantics of the creation process for parameterized types.  If
this {@code Class} represents either the {@code Object}
class, an interface, a primitive type, or void, then null is
returned.  If this object represents an array class then the
{@code Class} object representing the {@code Object} class is
returned.

@throws GenericSignatureFormatError if the generic
    class signature does not conform to the format specified in the
    Java Virtual Machine Specification, 3rd edition
@throws TypeNotPresentException if the generic superclass
    refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if the
    generic superclass refers to a parameterized type that cannot be
    instantiated  for any reason
@return the superclass of the class represented by this object
@since 1.5"
      end

      operation 145671 "getPackage"
	public return_type class_ref 139015 // Package
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the package for this class.  The class loader of this class is used
to find the package.  If the class was loaded by the bootstrap class
loader the set of packages loaded from CLASSPATH is searched to find the
package of the class. Null is returned if no package object was created
by the class loader of this class.

<p> Packages have attributes for versions and specifications only if the
information was defined in the manifests that accompany the classes, and
if the class loader created the package instance with the attributes
from the manifest.

@return the package of the class, or null if no package
        information is available from the archive or codebase."
      end

      operation 145799 "getInterfaces"
	public return_type class_ref 137607 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}<?>[] ${name}${(}${)}${throws};
"
	
	
	
	comment "Determines the interfaces implemented by the class or interface
represented by this object.

<p> If this object represents a class, the return value is an array
containing objects representing all interfaces implemented by the
class. The order of the interface objects in the array corresponds to
the order of the interface names in the {@code implements} clause
of the declaration of the class represented by this object. For
example, given the declaration:
<blockquote>
{@code class Shimmer implements FloorWax, DessertTopping { ... }}
</blockquote>
suppose the value of {@code s} is an instance of
{@code Shimmer}; the value of the expression:
<blockquote>
{@code s.getClass().getInterfaces()[0]}
</blockquote>
is the {@code Class} object that represents interface
{@code FloorWax}; and the value of:
<blockquote>
{@code s.getClass().getInterfaces()[1]}
</blockquote>
is the {@code Class} object that represents interface
{@code DessertTopping}.

<p> If this object represents an interface, the array contains objects
representing all interfaces extended by the interface. The order of the
interface objects in the array corresponds to the order of the interface
names in the {@code extends} clause of the declaration of the
interface represented by this object.

<p> If this object represents a class or interface that implements no
interfaces, the method returns an array of length 0.

<p> If this object represents a primitive type or void, the method
returns an array of length 0.

@return an array of interfaces implemented by this class."
      end

      operation 145927 "getGenericInterfaces"
	public return_type class_ref 137991 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code Type}s representing the interfaces
directly implemented by the class or interface represented by
this object.

<p>If a superinterface is a parameterized type, the
{@code Type} object returned for it must accurately reflect
the actual type parameters used in the source code. The
parameterized type representing each superinterface is created
if it had not been created before. See the declaration of
{@link java.lang.reflect.ParameterizedType ParameterizedType}
for the semantics of the creation process for parameterized
types.

<p> If this object represents a class, the return value is an
array containing objects representing all interfaces
implemented by the class. The order of the interface objects in
the array corresponds to the order of the interface names in
the {@code implements} clause of the declaration of the class
represented by this object.  In the case of an array class, the
interfaces {@code Cloneable} and {@code Serializable} are
returned in that order.

<p>If this object represents an interface, the array contains
objects representing all interfaces directly extended by the
interface.  The order of the interface objects in the array
corresponds to the order of the interface names in the
{@code extends} clause of the declaration of the interface
represented by this object.

<p>If this object represents a class or interface that
implements no interfaces, the method returns an array of length
0.

<p>If this object represents a primitive type or void, the
method returns an array of length 0.

@throws GenericSignatureFormatError
    if the generic class signature does not conform to the format
    specified in the Java Virtual Machine Specification, 3rd edition
@throws TypeNotPresentException if any of the generic
    superinterfaces refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if any of the
    generic superinterfaces refer to a parameterized type that cannot
    be instantiated  for any reason
@return an array of interfaces implemented by this class
@since 1.5"
      end

      operation 146055 "getComponentType"
	public return_type class_ref 137607 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}<?> ${name}${(}${)}${throws};
"
	
	
	
	comment "Returns the {@code Class} representing the component type of an
array.  If this class does not represent an array class this method
returns null.

@return the {@code Class} representing the component type of this
class if this class is an array
@see     java.lang.reflect.Array
@since JDK1.1"
      end

      operation 146183 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
"
	
	
	
	comment "Returns the Java language modifiers for this class or interface, encoded
in an integer. The modifiers consist of the Java Virtual Machine's
constants for {@code public}, {@code protected},
{@code private}, {@code final}, {@code static},
{@code abstract} and {@code interface}; they should be decoded
using the methods of class {@code Modifier}.

<p> If the underlying class is an array class, then its
{@code public}, {@code private} and {@code protected}
modifiers are the same as those of its component type.  If this
{@code Class} represents a primitive type or void, its
{@code public} modifier is always {@code true}, and its
{@code protected} and {@code private} modifiers are always
{@code false}. If this object represents an array class, a
primitive type or void, then its {@code final} modifier is always
{@code true} and its interface modifier is always
{@code false}. The values of its other modifiers are not determined
by this specification.

<p> The modifier encodings are defined in <em>The Java Virtual Machine
Specification</em>, table 4.1.

@return the {@code int} representing the modifiers for this class
@see     java.lang.reflect.Modifier
@since JDK1.1"
      end

      operation 146311 "getSigners"
	public return_type class_ref 136327 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${)}${throws};
"
	
	
	
	comment "Gets the signers of this class.

@return  the signers of this class, or null if there are no signers.  In
         particular, this method returns null if this object represents
         a primitive type or void.
@since   JDK1.1"
      end

      operation 146439 "setSigners"
	package explicit_return_type "void"
	nparams 1
	  param inout name "signers" type class_ref 136327 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}${)}${throws};
"
	
	
	
	comment "Set the signers of this class."
      end

      operation 146567 "getEnclosingMethod"
	public return_type class_ref 139143 // Method
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this {@code Class} object represents a local or anonymous
class within a method, returns a {@link
java.lang.reflect.Method Method} object representing the
immediately enclosing method of the underlying class. Returns
{@code null} otherwise.

In particular, this method returns {@code null} if the underlying
class is a local or anonymous class immediately enclosed by a type
declaration, instance initializer or static initializer.

@return the immediately enclosing method of the underlying class, if
    that class is a local or anonymous class; otherwise {@code null}.
@since 1.5"
      end

      class 139271 "EnclosingMethodInfo"
	visibility private 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 146695 "isPartial"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 146823 "isConstructor"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 146951 "isMethod"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 147079 "getEnclosingClass"
	  package return_type class_ref 137607 // Class
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 147207 "getName"
	  package return_type class_ref 136967 // String
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 147335 "getDescriptor"
	  package return_type class_ref 136967 // String
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 147463 "getEnclosingConstructor"
	public return_type class_ref 138887 // Constructor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this {@code Class} object represents a local or anonymous
class within a constructor, returns a {@link
java.lang.reflect.Constructor Constructor} object representing
the immediately enclosing constructor of the underlying
class. Returns {@code null} otherwise.  In particular, this
method returns {@code null} if the underlying class is a local
or anonymous class immediately enclosed by a type declaration,
instance initializer or static initializer.

@return the immediately enclosing constructor of the underlying class, if
    that class is a local or anonymous class; otherwise {@code null}.
@since 1.5"
      end

      operation 147591 "getDeclaringClass"
	public return_type class_ref 137607 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}<?> ${name}${(}${)}${throws};
"
	
	
	
	comment "If the class or interface represented by this {@code Class} object
is a member of another class, returns the {@code Class} object
representing the class in which it was declared.  This method returns
null if this class or interface is not a member of any other class.  If
this {@code Class} object represents an array class, a primitive
type, or void,then this method returns null.

@return the declaring class for this class
@since JDK1.1"
      end

      operation 147719 "getEnclosingClass"
	public return_type class_ref 137607 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the immediately enclosing class of the underlying
class.  If the underlying class is a top level class this
method returns {@code null}.
@return the immediately enclosing class of the underlying class
@since 1.5"
      end

      operation 147847 "getSimpleName"
	public return_type class_ref 136967 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the simple name of the underlying class as given in the
source code. Returns an empty string if the underlying class is
anonymous.

<p>The simple name of an array is the simple name of the
component type with \"[]\" appended.  In particular the simple
name of an array whose component type is anonymous is \"[]\".

@return the simple name of the underlying class
@since 1.5"
      end

      operation 147975 "getCanonicalName"
	public return_type class_ref 136967 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the canonical name of the underlying class as
defined by the Java Language Specification.  Returns null if
the underlying class does not have a canonical name (i.e., if
it is a local or anonymous class or an array whose component
type does not have a canonical name).
@return the canonical name of the underlying class if it exists, and
{@code null} otherwise.
@since 1.5"
      end

      operation 148103 "isAnonymousClass"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if and only if the underlying class
is an anonymous class.

@return {@code true} if and only if this class is an anonymous class.
@since 1.5"
      end

      operation 148231 "isLocalClass"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if and only if the underlying class
is a local class.

@return {@code true} if and only if this class is a local class.
@since 1.5"
      end

      operation 148359 "isMemberClass"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if and only if the underlying class
is a member class.

@return {@code true} if and only if this class is a member class.
@since 1.5"
      end

      operation 148487 "getClasses"
	public return_type class_ref 137607 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing {@code Class} objects representing all
the public classes and interfaces that are members of the class
represented by this {@code Class} object.  This includes public
class and interface members inherited from superclasses and public class
and interface members declared by the class.  This method returns an
array of length 0 if this {@code Class} object has no public member
classes or interfaces.  This method also returns an array of length 0 if
this {@code Class} object represents a primitive type, an array
class, or void.

@return the array of {@code Class} objects representing the public
members of this class
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)} method
            denies access to the classes within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 148615 "getFields"
	public return_type class_ref 139399 // Field
	nparams 0
	nexceptions 1
	  exception class_ref 139527 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing {@code Field} objects reflecting all
the accessible public fields of the class or interface represented by
this {@code Class} object.  The elements in the array returned are
not sorted and are not in any particular order.  This method returns an
array of length 0 if the class or interface has no accessible public
fields, or if it represents an array class, a primitive type, or void.

<p> Specifically, if this {@code Class} object represents a class,
this method returns the public fields of this class and of all its
superclasses.  If this {@code Class} object represents an
interface, this method returns the fields of this interface and of all
its superinterfaces.

<p> The implicit length field for array class is not reflected by this
method. User code should use the methods of class {@code Array} to
manipulate arrays.

<p> See <em>The Java Language Specification</em>, sections 8.2 and 8.3.

@return the array of {@code Field} objects representing the
public fields
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)} denies
            access to the fields within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 148743 "getMethods"
	public return_type class_ref 139143 // Method
	nparams 0
	nexceptions 1
	  exception class_ref 139527 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing {@code Method} objects reflecting all
the public <em>member</em> methods of the class or interface represented
by this {@code Class} object, including those declared by the class
or interface and those inherited from superclasses and
superinterfaces.  Array classes return all the (public) member methods
inherited from the {@code Object} class.  The elements in the array
returned are not sorted and are not in any particular order.  This
method returns an array of length 0 if this {@code Class} object
represents a class or interface that has no public member methods, or if
this {@code Class} object represents a primitive type or void.

<p> The class initialization method {@code <clinit>} is not
included in the returned array. If the class declares multiple public
member methods with the same parameter types, they are all included in
the returned array.

<p> See <em>The Java Language Specification</em>, sections 8.2 and 8.4.

@return the array of {@code Method} objects representing the
public methods of this class
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)} denies
            access to the methods within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 148871 "getConstructors"
	public return_type class_ref 138887 // Constructor
	nparams 0
	nexceptions 1
	  exception class_ref 139527 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing {@code Constructor} objects reflecting
all the public constructors of the class represented by this
{@code Class} object.  An array of length 0 is returned if the
class has no public constructors, or if the class is an array class, or
if the class reflects a primitive type or void.

Note that while this method returns an array of {@code
Constructor<T>} objects (that is an array of constructors from
this class), the return type of this method is {@code
Constructor<?>[]} and <em>not</em> {@code Constructor<T>[]} as
might be expected.  This less informative return type is
necessary since after being returned from this method, the
array could be modified to hold {@code Constructor} objects for
different classes, which would violate the type guarantees of
{@code Constructor<T>[]}.

@return the array of {@code Constructor} objects representing the
 public constructors of this class
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)} denies
            access to the constructors within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 148999 "getField"
	public return_type class_ref 139399 // Field
	nparams 1
	  param inout name "name" type class_ref 136967 // String
	nexceptions 2
	  exception class_ref 139655 // NoSuchFieldException
	  exception class_ref 139527 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Field} object that reflects the specified public
member field of the class or interface represented by this
{@code Class} object. The {@code name} parameter is a
{@code String} specifying the simple name of the desired field.

<p> The field to be reflected is determined by the algorithm that
follows.  Let C be the class represented by this object:
<OL>
<LI> If C declares a public field with the name specified, that is the
     field to be reflected.</LI>
<LI> If no field was found in step 1 above, this algorithm is applied
     recursively to each direct superinterface of C. The direct
     superinterfaces are searched in the order they were declared.</LI>
<LI> If no field was found in steps 1 and 2 above, and C has a
     superclass S, then this algorithm is invoked recursively upon S.
     If C has no superclass, then a {@code NoSuchFieldException}
     is thrown.</LI>
</OL>

<p> See <em>The Java Language Specification</em>, sections 8.2 and 8.3.

@param name the field name
@return  the {@code Field} object of this class specified by
{@code name}
@exception NoSuchFieldException if a field with the specified name is
             not found.
@exception NullPointerException if {@code name} is {@code null}
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)} denies
            access to the field

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 149127 "getMethod"
	public return_type class_ref 139143 // Method
	nparams 2
	  param inout name "name" type class_ref 136967 // String
	  param inout name "parameterTypes" explicit_type "Class<?>..."
	nexceptions 2
	  exception class_ref 139783 // NoSuchMethodException
	  exception class_ref 139527 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Method} object that reflects the specified public
member method of the class or interface represented by this
{@code Class} object. The {@code name} parameter is a
{@code String} specifying the simple name of the desired method. The
{@code parameterTypes} parameter is an array of {@code Class}
objects that identify the method's formal parameter types, in declared
order. If {@code parameterTypes} is {@code null}, it is
treated as if it were an empty array.

<p> If the {@code name} is \"{@code <init>};\"or \"{@code <clinit>}\" a
{@code NoSuchMethodException} is raised. Otherwise, the method to
be reflected is determined by the algorithm that follows.  Let C be the
class represented by this object:
<OL>
<LI> C is searched for any <I>matching methods</I>. If no matching
     method is found, the algorithm of step 1 is invoked recursively on
     the superclass of C.</LI>
<LI> If no method was found in step 1 above, the superinterfaces of C
     are searched for a matching method. If any such method is found, it
     is reflected.</LI>
</OL>

To find a matching method in a class C:&nbsp; If C declares exactly one
public method with the specified name and exactly the same formal
parameter types, that is the method reflected. If more than one such
method is found in C, and one of these methods has a return type that is
more specific than any of the others, that method is reflected;
otherwise one of the methods is chosen arbitrarily.

<p>Note that there may be more than one matching method in a
class because while the Java language forbids a class to
declare multiple methods with the same signature but different
return types, the Java virtual machine does not.  This
increased flexibility in the virtual machine can be used to
implement various language features.  For example, covariant
returns can be implemented with {@linkplain
java.lang.reflect.Method#isBridge bridge methods}; the bridge
method and the method being overridden would have the same
signature but different return types.

<p> See <em>The Java Language Specification</em>, sections 8.2 and 8.4.

@param name the name of the method
@param parameterTypes the list of parameters
@return the {@code Method} object that matches the specified
{@code name} and {@code parameterTypes}
@exception NoSuchMethodException if a matching method is not found
           or if the name is \"&lt;init&gt;\"or \"&lt;clinit&gt;\".
@exception NullPointerException if {@code name} is {@code null}
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)} denies
            access to the method

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 149255 "getConstructor"
	public return_type class_ref 138887 // Constructor
	nparams 1
	  param inout name "parameterTypes" explicit_type "Class<?>..."
	nexceptions 2
	  exception class_ref 139783 // NoSuchMethodException
	  exception class_ref 139527 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Constructor} object that reflects the specified
public constructor of the class represented by this {@code Class}
object. The {@code parameterTypes} parameter is an array of
{@code Class} objects that identify the constructor's formal
parameter types, in declared order.

If this {@code Class} object represents an inner class
declared in a non-static context, the formal parameter types
include the explicit enclosing instance as the first parameter.

<p> The constructor to reflect is the public constructor of the class
represented by this {@code Class} object whose formal parameter
types match those specified by {@code parameterTypes}.

@param parameterTypes the parameter array
@return the {@code Constructor} object of the public constructor that
matches the specified {@code parameterTypes}
@exception NoSuchMethodException if a matching method is not found.
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)} denies
            access to the constructor

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 149383 "getDeclaredClasses"
	public return_type class_ref 137607 // Class
	nparams 0
	nexceptions 1
	  exception class_ref 139527 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code Class} objects reflecting all the
classes and interfaces declared as members of the class represented by
this {@code Class} object. This includes public, protected, default
(package) access, and private classes and interfaces declared by the
class, but excludes inherited classes and interfaces.  This method
returns an array of length 0 if the class declares no classes or
interfaces as members, or if this {@code Class} object represents a
primitive type, an array class, or void.

@return the array of {@code Class} objects representing all the
declared members of this class
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.DECLARED)} denies
            access to the declared classes within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 149511 "getDeclaredFields"
	public return_type class_ref 139399 // Field
	nparams 0
	nexceptions 1
	  exception class_ref 139527 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code Field} objects reflecting all the fields
declared by the class or interface represented by this
{@code Class} object. This includes public, protected, default
(package) access, and private fields, but excludes inherited fields.
The elements in the array returned are not sorted and are not in any
particular order.  This method returns an array of length 0 if the class
or interface declares no fields, or if this {@code Class} object
represents a primitive type, an array class, or void.

<p> See <em>The Java Language Specification</em>, sections 8.2 and 8.3.

@return    the array of {@code Field} objects representing all the
declared fields of this class
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.DECLARED)} denies
            access to the declared fields within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 149639 "getDeclaredMethods"
	public return_type class_ref 139143 // Method
	nparams 0
	nexceptions 1
	  exception class_ref 139527 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code Method} objects reflecting all the
methods declared by the class or interface represented by this
{@code Class} object. This includes public, protected, default
(package) access, and private methods, but excludes inherited methods.
The elements in the array returned are not sorted and are not in any
particular order.  This method returns an array of length 0 if the class
or interface declares no methods, or if this {@code Class} object
represents a primitive type, an array class, or void.  The class
initialization method {@code <clinit>} is not included in the
returned array. If the class declares multiple public member methods
with the same parameter types, they are all included in the returned
array.

<p> See <em>The Java Language Specification</em>, section 8.2.

@return    the array of {@code Method} objects representing all the
declared methods of this class
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.DECLARED)} denies
            access to the declared methods within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 149767 "getDeclaredConstructors"
	public return_type class_ref 138887 // Constructor
	nparams 0
	nexceptions 1
	  exception class_ref 139527 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code Constructor} objects reflecting all the
constructors declared by the class represented by this
{@code Class} object. These are public, protected, default
(package) access, and private constructors.  The elements in the array
returned are not sorted and are not in any particular order.  If the
class has a default constructor, it is included in the returned array.
This method returns an array of length 0 if this {@code Class}
object represents an interface, a primitive type, an array class, or
void.

<p> See <em>The Java Language Specification</em>, section 8.2.

@return    the array of {@code Constructor} objects representing all the
declared constructors of this class
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.DECLARED)} denies
            access to the declared constructors within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 149895 "getDeclaredField"
	public return_type class_ref 139399 // Field
	nparams 1
	  param inout name "name" type class_ref 136967 // String
	nexceptions 2
	  exception class_ref 139655 // NoSuchFieldException
	  exception class_ref 139527 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Field} object that reflects the specified declared
field of the class or interface represented by this {@code Class}
object. The {@code name} parameter is a {@code String} that
specifies the simple name of the desired field.  Note that this method
will not reflect the {@code length} field of an array class.

@param name the name of the field
@return the {@code Field} object for the specified field in this
class
@exception NoSuchFieldException if a field with the specified name is
             not found.
@exception NullPointerException if {@code name} is {@code null}
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.DECLARED)} denies
            access to the declared field

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 150023 "getDeclaredMethod"
	public return_type class_ref 139143 // Method
	nparams 2
	  param inout name "name" type class_ref 136967 // String
	  param inout name "parameterTypes" explicit_type "Class<?>..."
	nexceptions 2
	  exception class_ref 139783 // NoSuchMethodException
	  exception class_ref 139527 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Method} object that reflects the specified
declared method of the class or interface represented by this
{@code Class} object. The {@code name} parameter is a
{@code String} that specifies the simple name of the desired
method, and the {@code parameterTypes} parameter is an array of
{@code Class} objects that identify the method's formal parameter
types, in declared order.  If more than one method with the same
parameter types is declared in a class, and one of these methods has a
return type that is more specific than any of the others, that method is
returned; otherwise one of the methods is chosen arbitrarily.  If the
name is \"&lt;init&gt;\"or \"&lt;clinit&gt;\" a {@code NoSuchMethodException}
is raised.

@param name the name of the method
@param parameterTypes the parameter array
@return    the {@code Method} object for the method of this class
matching the specified name and parameters
@exception NoSuchMethodException if a matching method is not found.
@exception NullPointerException if {@code name} is {@code null}
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.DECLARED)} denies
            access to the declared method

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 150151 "getDeclaredConstructor"
	public return_type class_ref 138887 // Constructor
	nparams 1
	  param inout name "parameterTypes" explicit_type "Class<?>..."
	nexceptions 2
	  exception class_ref 139783 // NoSuchMethodException
	  exception class_ref 139527 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Constructor} object that reflects the specified
constructor of the class or interface represented by this
{@code Class} object.  The {@code parameterTypes} parameter is
an array of {@code Class} objects that identify the constructor's
formal parameter types, in declared order.

If this {@code Class} object represents an inner class
declared in a non-static context, the formal parameter types
include the explicit enclosing instance as the first parameter.

@param parameterTypes the parameter array
@return    The {@code Constructor} object for the constructor with the
specified parameter list
@exception NoSuchMethodException if a matching method is not found.
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of
            {@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.DECLARED)} denies
            access to the declared constructor

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 150279 "getResourceAsStream"
	public return_type class_ref 139911 // InputStream
	nparams 1
	  param inout name "name" type class_ref 136967 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds a resource with a given name.  The rules for searching resources
associated with a given class are implemented by the defining
{@linkplain ClassLoader class loader} of the class.  This method
delegates to this object's class loader.  If this object was loaded by
the bootstrap class loader, the method delegates to {@link
ClassLoader#getSystemResourceAsStream}.

<p> Before delegation, an absolute resource name is constructed from the
given resource name using this algorithm:

<ul>

<li> If the {@code name} begins with a {@code '/'}
(<tt>'&#92;u002f'</tt>), then the absolute name of the resource is the
portion of the {@code name} following the {@code '/'}.

<li> Otherwise, the absolute name is of the following form:

<blockquote>
  {@code modified_package_name/name}
</blockquote>

<p> Where the {@code modified_package_name} is the package name of this
object with {@code '/'} substituted for {@code '.'}
(<tt>'&#92;u002e'</tt>).

</ul>

@param  name name of the desired resource
@return      A {@link java.io.InputStream} object or {@code null} if
             no resource with this name is found
@throws  NullPointerException If {@code name} is {@code null}
@since  JDK1.1"
      end

      operation 150407 "getResource"
	public return_type class_ref 140039 // URL
	nparams 1
	  param inout name "name" type class_ref 136967 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds a resource with a given name.  The rules for searching resources
associated with a given class are implemented by the defining
{@linkplain ClassLoader class loader} of the class.  This method
delegates to this object's class loader.  If this object was loaded by
the bootstrap class loader, the method delegates to {@link
ClassLoader#getSystemResource}.

<p> Before delegation, an absolute resource name is constructed from the
given resource name using this algorithm:

<ul>

<li> If the {@code name} begins with a {@code '/'}
(<tt>'&#92;u002f'</tt>), then the absolute name of the resource is the
portion of the {@code name} following the {@code '/'}.

<li> Otherwise, the absolute name is of the following form:

<blockquote>
  {@code modified_package_name/name}
</blockquote>

<p> Where the {@code modified_package_name} is the package name of this
object with {@code '/'} substituted for {@code '.'}
(<tt>'&#92;u002e'</tt>).

</ul>

@param  name name of the desired resource
@return      A  {@link java.net.URL} object or {@code null} if no
             resource with this name is found
@since  JDK1.1"
      end

      operation 150535 "getProtectionDomain"
	public return_type class_ref 140167 // ProtectionDomain
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code ProtectionDomain} of this class.  If there is a
security manager installed, this method first calls the security
manager's {@code checkPermission} method with a
{@code RuntimePermission(\"getProtectionDomain\")} permission to
ensure it's ok to get the
{@code ProtectionDomain}.

@return the ProtectionDomain of this class

@throws SecurityException
       if a security manager exists and its
       {@code checkPermission} method doesn't allow
       getting the ProtectionDomain.

@see java.security.ProtectionDomain
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission
@since 1.2"
      end

      operation 150663 "setProtectionDomain0"
	package explicit_return_type "void"
	nparams 1
	  param inout name "pd" type class_ref 140167 // ProtectionDomain
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment "Set the ProtectionDomain for this class. Called by
ClassLoader.defineClass."
      end

      operation 150791 "getPrimitiveClass"
	class_operation package return_type class_ref 137607 // Class
	nparams 1
	  param inout name "name" type class_ref 136967 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment "Return the Virtual Machine's Class object for the named
primitive type."
      end

      operation 150919 "getConstantPool"
	package return_type class_ref 140679 // ConstantPool
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
"
	
	
	
      end

      class 140807 "MethodArray"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 151047 "MethodArray"
	  package explicit_return_type ""
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 151175 "add"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "m" type class_ref 139143 // Method
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 151303 "addAll"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "ma" type class_ref 139143 // Method
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 151431 "addAll"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "ma" type class_ref 140807 // MethodArray
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 151559 "addIfNotPresent"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "newMethod" type class_ref 139143 // Method
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 151687 "addAllIfNotPresent"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "newMethods" type class_ref 140807 // MethodArray
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 151815 "length"
	  package explicit_return_type "int"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 151943 "get"
	  package return_type class_ref 139143 // Method
	  nparams 1
	    param in name "i" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 152071 "removeByNameAndSignature"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "toRemove" type class_ref 139143 // Method
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 152199 "compactAndTrim"
	  package explicit_return_type "void"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 152327 "getArray"
	  package return_type class_ref 139143 // Method
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 152455 "desiredAssertionStatus"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the assertion status that would be assigned to this
class if it were to be initialized at the time this method is invoked.
If this class has had its assertion status set, the most recent
setting will be returned; otherwise, if any package default assertion
status pertains to this class, the most recent setting for the most
specific pertinent package default assertion status is returned;
otherwise, if this class is not a system class (i.e., it has a
class loader) its class loader's default assertion status is returned;
otherwise, the system class default assertion status is returned.
<p>
Few programmers will have any need for this method; it is provided
for the benefit of the JRE itself.  (It allows a class to determine at
the time that it is initialized whether assertions should be enabled.)
Note that this method is not guaranteed to return the actual
assertion status that was (or will be) associated with the specified
class when it was (or will be) initialized.

@return the desired assertion status of the specified class.
@see    java.lang.ClassLoader#setClassAssertionStatus
@see    java.lang.ClassLoader#setPackageAssertionStatus
@see    java.lang.ClassLoader#setDefaultAssertionStatus
@since  1.4"
      end

      operation 152583 "isEnum"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if and only if this class was declared as an enum in the
source code.

@return true if and only if this class was declared as an enum in the
    source code
@since 1.5"
      end

      operation 152711 "getEnumConstants"
	public explicit_return_type "T"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the elements of this enum class or null if this
Class object does not represent an enum type.

@return an array containing the values comprising the enum class
    represented by this Class object in the order they're
    declared, or null if this Class object does not
    represent an enum type
@since 1.5"
      end

      operation 152839 "getEnumConstantsShared"
	package explicit_return_type "T"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the elements of this enum class or null if this
Class object does not represent an enum type;
identical to getEnumConstantsShared except that
the result is uncloned, cached, and shared by all callers."
      end

      operation 152967 "enumConstantDirectory"
	package return_type class_ref 141191 // Map
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a map from simple name to enum constant.  This package-private
method is used internally by Enum to implement
    public static <T extends Enum<T>> T valueOf(Class<T>, String)
efficiently.  Note that the map is returned by this method is
created lazily on first use.  Typically it won't ever get created."
      end

      operation 153095 "cast"
	public explicit_return_type "T"
	nparams 1
	  param inout name "obj" type class_ref 136327 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Casts an object to the class or interface represented
by this {@code Class} object.

@param obj the object to be cast
@return the object after casting, or null if obj is null

@throws ClassCastException if the object is not
null and is not assignable to the type T.

@since 1.5"
      end

      operation 153223 "asSubclass"
	public return_type class_ref 137607 // Class
	nparams 1
	  param inout name "clazz" type class_ref 137607 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<? extends U> ${name}${(}${t0}<U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Casts this {@code Class} object to represent a subclass of the class
represented by the specified class object.  Checks that that the cast
is valid, and throws a {@code ClassCastException} if it is not.  If
this method succeeds, it always returns a reference to this class object.

<p>This method is useful when a client needs to \"narrow\" the type of
a {@code Class} object to pass it to an API that restricts the
{@code Class} objects that it is willing to accept.  A cast would
generate a compile-time warning, as the correctness of the cast
could not be checked at runtime (because generic types are implemented
by erasure).

@return this {@code Class} object, cast to represent a subclass of
   the specified class object.
@throws ClassCastException if this {@code Class} object does not
   represent a subclass of the specified class (here \"subclass\" includes
   the class itself).
@since 1.5"
      end

      operation 153351 "getAnnotation"
	public explicit_return_type "A"
	nparams 1
	  param inout name "annotationClass" type class_ref 137607 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A extends Annotation> ${type} ${name}${(}${t0}<A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@since 1.5"
      end

      operation 153479 "isAnnotationPresent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "annotationClass" type class_ref 137607 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Annotation> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@since 1.5"
      end

      operation 153607 "getAnnotations"
	public return_type class_ref 138247 // Annotation
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since 1.5"
      end

      operation 153735 "getDeclaredAnnotations"
	public return_type class_ref 138247 // Annotation
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since 1.5"
      end

      operation 153863 "setAnnotationType"
	package explicit_return_type "void"
	nparams 1
	  param inout name "type" type class_ref 141319 // AnnotationType
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 153991 "getAnnotationType"
	package return_type class_ref 141319 // AnnotationType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 138375 "ClassNotFoundException"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 138503 "ClassLoader"
      abstract visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 138631 "InstantiationException"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 138759 "IllegalAccessException"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 139015 "Package"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 139527 "SecurityException"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 139655 "NoSuchFieldException"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 139783 "NoSuchMethodException"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 158087 "CloneNotSupportedException"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end
  end

  package_ref 135303 // reflect

  package_ref 135431 // annotation

  package_ref 135815 // ref
end
